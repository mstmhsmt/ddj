
DEFINE input:inference "ont.cpi"

PREFIX fb:   <http://codinuum.com/fb/>
PREFIX ent:  <http://codinuum.com/fact/entity/>
PREFIX rel:  <http://codinuum.com/fact/version/release/>
PREFIX ext:  <http://codinuum.com/fact/external/>
PREFIX src:  <http://codinuum.com/ontologies/2012/10/source-code-entity#>
PREFIX ver:  <http://codinuum.com/ontologies/2012/10/versioning#>
PREFIX chg:  <http://codinuum.com/ontologies/2012/10/primitive-change#>
PREFIX java: <http://codinuum.com/ontologies/2012/10/java-entity#>
PREFIX c:    <http://codinuum.com/ontologies/2012/10/c-entity#>


SELECT DISTINCT ?class ?interf_ ?iname_ ?class_ ?e0
(?e0 AS ?originalContext)
(?class AS ?originalClass)
(?class_ AS ?modifiedClass)
(?interf_ AS ?extractedInterface)
(?iname_ AS ?interfaceName)
(?iname_ AS ?GROUP)
WHERE {

  {
    SELECT DISTINCT ?ver ?ver_ ?interf_ ?iname_ ?e0 (COUNT(DISTINCT ?class0) AS ?n)
    WHERE {

      {
        SELECT DISTINCT ?interf_ ?iname_ ?e0
        WHERE {

          ?interf_ a java:InterfaceDeclaration ;
                   java:fullyQualifiedName ?iname_ ;
                   chg:insertedOrGrafted ?e0 .

        } GROUP BY ?interf_ ?iname_ ?e0
      }

      ?e0 src:parent*/ver:version ?ver .

      ?ver ver:next ?ver_ .

      ?interf_ ver:version ?ver_ .

      ?class0 a java:TypeDeclaration ;
              chg:mappedTo ?class0_ .

      ?class0_ a java:TypeDeclaration ;
               java:subTypeOf ?interf_ .

      FILTER EXISTS {
        ?class0 ver:version ?ver .
        ?class0_ ver:version ?ver_ .
      }
      
    } GROUP BY ?ver ?ver_ ?interf_ ?iname_ ?e0
  }

  FILTER (?n = 1)

  {
    SELECT DISTINCT ?interf_ ?class ?class_ ?cname ?cname_
    WHERE {
      ?class a java:TypeDeclaration ;
           java:fullyQualifiedName ?cname ;
           chg:mappedTo ?class_ .

      ?class_ a java:TypeDeclaration ;
            java:fullyQualifiedName ?cname_ ;
            java:subClassOf ?interf_ .

    } GROUP BY ?interf_ ?class ?class_ ?cname ?cname_
  }

  ?class ver:version ?ver .
  ?class_ ver:version ?ver_ .

}
