
DEFINE input:inference "ont.cpi"

PREFIX fb:   <http://codinuum.com/fb/>
PREFIX ent:  <http://codinuum.com/fact/entity/>
PREFIX rel:  <http://codinuum.com/fact/version/release/>
PREFIX ext:  <http://codinuum.com/fact/external/>
PREFIX src:  <http://codinuum.com/ontologies/2012/10/source-code-entity#>
PREFIX ver:  <http://codinuum.com/ontologies/2012/10/versioning#>
PREFIX chg:  <http://codinuum.com/ontologies/2012/10/primitive-change#>
PREFIX java: <http://codinuum.com/ontologies/2012/10/java-entity#>
PREFIX c:    <http://codinuum.com/ontologies/2012/10/c-entity#>


SELECT DISTINCT ?meth ?meth_ ?C0 ?C0_ ?SuperC_ ?mname_ ?msig_ ?C0name ?SuperCname_ ?ctx ?ctx_
(?C0 AS ?fromClass)
(?SuperC_ AS ?toClass)
(?C0name AS ?fromClassName)
(?SuperCname_ AS ?toClassName)
(?ctx AS ?context)
(?ctx_ AS ?context_)
(?meth AS ?originalMethod)
(?meth_ AS ?movedMethod)
(?mname_ AS ?methodName)
(?msig_ AS ?signature)
(?mname_ AS ?GROUP)
WHERE {

  {
    SELECT DISTINCT ?ver ?ver_ ?SuperC_ ?SuperCname_ ?e0
    ?C0 ?C0_ ?C0name ?C0name_ ?C0fqn ?C0fqn_
    ?meth ?meth_ ?mname_ ?msig_ ?mfqn ?mfqn_
    WHERE {

      {
        SELECT DISTINCT ?ver ?ver_ ?SuperC_ ?SuperCname_ ?e0
        ?C0 ?C0_ ?C0name ?C0name_ ?C0fqn ?C0fqn_
        WHERE {

          {
            SELECT DISTINCT ?ver ?ver_ ?SuperC_ ?SuperCname_ ?e0
            WHERE {

              ?SuperC_ a java:ClassDeclaration ;
                       java:fullyQualifiedName ?SuperCname_ ;
                       chg:insertedOrGrafted ?e0 .

              ?e0 src:parent*/ver:version ?ver .

              ?SuperC_ ver:version ?ver_ .

              ?ver ver:next ?ver_ .

            } GROUP BY ?ver ?ver_ ?SuperC_ ?SuperCname_ ?e0
          }

          ?C0 a java:ClassDeclaration ;
              java:name ?C0name ;
              java:fullyQualifiedName ?C0fqn ;
              chg:mappedTo ?C0_ .

          ?C0_ a java:ClassDeclaration ;
               java:name ?C0name_ ;
               java:fullyQualifiedName ?C0fqn_ ;
               java:subClassOf ?SuperC_ .

          FILTER EXISTS {
            ?C0 ver:version ?ver .
            ?C0_ ver:version ?ver_ .
          }

        } GROUP BY ?ver ?ver_ ?SuperC_ ?SuperCname_ ?e0
        ?C0 ?C0_ ?C0name ?C0name_ ?C0fqn ?C0fqn_
      }

      ?meth_ a java:MethodDeclaration ;
             java:inTypeDeclaration ?SuperC_ ;
             java:fullyQualifiedName ?mfqn_ ;
             java:name ?mname_ .
      #        java:signature ?msig_ .

      ?meth a java:MethodDeclaration ;
            java:inTypeDeclaration ?C0 ;
            java:fullyQualifiedName ?mfqn ;
            java:name ?mname_ ;
            java:signature ?msig_ .

      OPTIONAL {
        ?m_ a java:MethodDeclaration ;
            java:inTypeDeclaration ?C0_ ;
            java:name ?mname_ ;
            java:signature ?msig_ .
      }
      FILTER (!BOUND(?m_))

      FILTER EXISTS {
        ?meth_ java:signature ?msig_ .
      }

    } GROUP BY ?ver ?ver_ ?SuperC_ ?SuperCname_ ?e0
    ?C0 ?C0_ ?C0name ?C0name_ ?C0fqn ?C0fqn_
    ?meth ?meth_ ?mname_ ?msig_ ?mfqn ?mfqn_
  }

  OPTIONAL {
    {
      ?meth_ chg:addition ?ctx .
    } UNION {
      ?meth_ ^chg:mappedTo ?ctx .
    }
  }

  OPTIONAL {
    {
      ?meth chg:removal ?ctx_ .
    } UNION {
      ?meth chg:mappedTo ?ctx_ .
    }
  }

}
