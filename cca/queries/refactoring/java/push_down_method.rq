
DEFINE input:inference "ont.cpi"

PREFIX ent:  <http://codinuum.com/fact/entity/>
PREFIX rel:  <http://codinuum.com/fact/version/release/>
PREFIX ext:  <http://codinuum.com/fact/external/>
PREFIX src:  <http://codinuum.com/ontologies/2012/10/source-code-entity#>
PREFIX ver:  <http://codinuum.com/ontologies/2012/10/versioning#>
PREFIX chg:  <http://codinuum.com/ontologies/2012/10/primitive-change#>
PREFIX java: <http://codinuum.com/ontologies/2012/10/java-entity#>
PREFIX c:    <http://codinuum.com/ontologies/2012/10/c-entity#>


SELECT DISTINCT 
?meth0 ?meth0_ ?e1 ?e0_ ?msig0 ?cname0 ?cname1_ ?mname0
(?mname0 AS ?methodName)
(?class0 AS ?originalClass)
(?class0_ AS ?modifiedClass)
(?class1_ AS ?subclass)
(?meth0 AS ?originalMethod) (?meth0_ AS ?movedMethod)
(?e1 AS ?originalContext) (?e0_ AS ?modifiedContext)
(?msig0 AS ?signature)
(?cname1_ AS ?subclassName)
(?cname0 AS ?className)
(?cname0 AS ?GROUP)
WHERE {

  {
    SELECT DISTINCT ?meth0 ?meth0_ ?e1 ?e0_ ?mname0 ?mname1_ ?msig0 ?class0 ?class0_ ?class1_
    ?ver ?ver_
    WHERE {

      {
        SELECT DISTINCT ?meth0 ?e0_ ?mname0 ?msig0 ?class0 ?class0_
        WHERE {
          
          ?meth0 a java:MethodDeclaration ;
                 java:inTypeDeclaration ?class0 ;
                 src:child5 [] ;
                 java:name ?mname0 ;
                 java:signature ?msig0 .
          {
            ?meth0 chg:removal ?e0_ .
          }
          UNION
          {
            ?meth0 chg:modified ?e0_ .
            FILTER NOT EXISTS {
              ?e0_ src:child5 [] ;
                   java:name ?mname0 ;
                   java:signature ?msig0 .
            }
          }

          ?class0 chg:mappedTo ?class0_ .

        } GROUP BY ?meth0 ?e0_ ?mname0 ?msig0 ?class0 ?class0_
      }

      ?class0 ver:version ?ver .
      ?ver ver:next ?ver_ .

      FILTER EXISTS {
        ?e0_ src:parent*/ver:version ?ver_ .
        ?class0_ ver:version ?ver_ .
      }

      FILTER NOT EXISTS {
        [] a java:MethodDeclaration ;
           java:inTypeDeclaration ?class0_ ;
           src:child5 [] ;
           java:name ?mname0 ;
           java:signature ?msig0 .
      }

      {
        SELECT DISTINCT ?class1_ ?msig0 ?mname1_ ?meth0_ ?e1
        WHERE {
          ?meth0_ a java:MethodDeclaration ;
                  java:inTypeDeclaration ?class1_ ;
                  src:child5 [] ;
                  java:name ?mname1_ ;
                  java:signature ?msig0 .
          {
            ?meth0_ chg:addition ?e1 .
          }
          UNION
          {
            ?meth0_ ^chg:modified ?e1 .
            FILTER NOT EXISTS {
              ?e1 src:child5 [] ;
                  java:name ?mname1_ ;
                  java:signature ?msig0 .
            }
          }

        } GROUP BY ?class1_ ?msig0 ?mname1_ ?meth0_ ?e1
      }

      FILTER EXISTS {
        ?class1_ ver:version ?ver_ .
        ?e1 src:parent*/ver:version ?ver .
      }

      ?class1_ java:subTypeOf+ ?class0_ .

    } GROUP BY ?meth0 ?meth0_ ?e1 ?e0_ ?mname0 ?mname1_ ?msig0 ?class0 ?class0_ ?class1_
    ?ver ?ver_
  }

  {
    ?meth0 java:name ?mn .
    ?meth0_ java:name ?mn .
  }
  UNION
  {
    {
      SELECT DISTINCT ?class1_ ?msig0 (COUNT(DISTINCT ?m0_) AS ?n) (SAMPLE(?m0_) AS ?m_)
      WHERE {
        ?m0_ a java:MethodDeclaration ;
             java:inTypeDeclaration ?class1_ ;
             java:signature ?msig0 .
      } GROUP BY ?class1_ ?msig0
    }
    FILTER (?n = 1)
    [] a java:Block ;
       java:inMethod ?meth0 ;
       src:children [] ;
       src:treeDigest ?d .
    [] java:inMethod ?m_ ;
       src:treeDigest ?d .
  }

  ?class0 java:fullyQualifiedName ?cfqn0 .
  ?class0_ java:fullyQualifiedName ?cfqn0_ .

  ?class1_ java:name ?cname1_ ;
           java:fullyQualifiedName ?cfqn1_ .

}
